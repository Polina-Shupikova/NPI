import telebot
from telebot import types
from dotenv import load_dotenv
import os

load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
bot = telebot.TeleBot(BOT_TOKEN)

ADMIN_CHAT_ID = 1195158333  # –í–∞—à ID –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–∑—ã–≤–æ–≤

@bot.message_handler(commands=['start'])
def handler_start(message):
    bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é!')
    bot.send_message(message.chat.id, '–≠—Ç–æ—Ç –±–æ—Ç-–∫—Ä–æ—Å—Å–≤–æ—Ä–¥ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è "—É–±–∏–π—Å—Ç–≤–∞" –≤—Ä–µ–º–µ–Ω–∏, –µ—Å–ª–∏ –≤–∞–º —Å–∫—É—á–Ω–æ.')
    
    markup = types.InlineKeyboardMarkup(row_width=2)
    web_app_url = "https://polina-shupikova.github.io/NPI/%D0%9F%D0%A0%D0%9E%D0%95%D0%9A%D0%A2/MAIN/"
    btn_yes = types.InlineKeyboardButton(
        text="–î–∞",
        web_app=types.WebAppInfo(url=web_app_url)
    )
    btn_no = types.InlineKeyboardButton("–ù–µ—Ç", callback_data="no")
    
    markup.add(btn_yes, btn_no)
    bot.send_message(message.chat.id, "–ù–∞—á–∞—Ç—å?", reply_markup=markup)

@bot.message_handler(commands=['help'])
def handler_help(message):
    help_text = """
üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:

/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–ø—Ä–∞–≤–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
/feedback - –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –æ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞
"""
    bot.send_message(message.chat.id, help_text, parse_mode="Markdown")

@bot.message_handler(commands=['feedback'])
def handler_feedback(message):
    markup = types.InlineKeyboardMarkup()
    feedback_btn = types.InlineKeyboardButton("üìù –ù–∞–ø–∏—Å–∞—Ç—å –æ—Ç–∑—ã–≤", callback_data="leave_feedback")
    markup.add(feedback_btn)
    
    bot.send_message(message.chat.id, "–•–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –æ –±–æ—Ç–µ?", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == "leave_feedback")
def handle_feedback_callback(call):
    bot.answer_callback_query(call.id)
    msg = bot.send_message(call.from_user.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤ –æ –±–æ—Ç–µ:")
    bot.register_next_step_handler(msg, process_feedback)

def process_feedback(message):
    if message.text:
        try:
            feedback_text = (
                f"üìù –ù–æ–≤—ã–π –æ—Ç–∑—ã–≤ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n"
                f"üë§ ID: {message.from_user.id}\n"
                f"üìõ –ò–º—è: @{message.from_user.username}\n\n"
                f"‚úâÔ∏è –¢–µ–∫—Å—Ç:\n{message.text}"
            )
            bot.send_message(ADMIN_CHAT_ID, feedback_text)
            bot.send_message(message.chat.id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤! –û–Ω –±—ã–ª –ø–µ—Ä–µ–¥–∞–Ω —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É.")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–∑—ã–≤–∞: {e}")
            bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–∑—ã–≤–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    else:
        bot.send_message(message.chat.id, "–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤ —Ç–µ–∫—Å—Ç–æ–º.")

@bot.callback_query_handler(func=lambda call: call.data == "no")
def handle_no_callback(call):
    bot.send_message(call.message.chat.id, "–ü–ª–∞–∫–µ –ø–ª–∞–∫–µ")

if __name__ == '__main__':
    bot.polling(none_stop=True)